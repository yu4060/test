00.文字列の逆順 文字列"stressed"の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ．

>>> str = 'stressed' 
>>> print(str[::-1])
desserts

01 .「パタトクカシーー」
 「パタトクカシーー」という文字列の1,3,5,7文字目を取り出して連結した文字列を得よ．

>>> str = 'パタトクカシーー'
>>> print(str[::2])
パトカー

02.「パトカー」＋「タクシー」＝「パタトクカシーー」
「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ．

>>> str1, str2 = 'パトカー', 'タクシー'
>>> for (word1, word2) in zip(str1, str2):
...     print(word1, word2, sep='', end='')
... 
パタトクカシーー>>> 

03.円周率
"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics."という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ．

>>> sentence = 'Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.'
>>> list = []
>>> for word in sentence.split():
...     list.append(len(word) - word.count(',') - word.count('.'))
... 
>>> list
[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]

04.元素記号
"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can."という文を単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字，それ以外の単語は先頭に2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列（辞書型もしくはマップ型）を作成せよ．

>>> words = sentence.split()
>>> total_nubmers = list(range(len(words)))
>>> picked_numbers = [x -1 for x in [1, 5, 6, 7, 8, 9, 15, 16, 19]]
>>> chemical_elements = {}
>>> for (n, word) in zip(total_nubmers, words):
...     if n in picked_numbers:
...             chemical_elements[word[:1]] = n + 1
...     else:
...             chemical_elements[word[:2]] = n + 1
... 
>>> chemical_elements
{'H': 1, 'He': 2, 'Li': 3, 'Be': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9, 'Ne': 10, 'Na': 11, 'Mi': 12, 'Al': 13, 'Si': 14, 'P': 15, 'S': 16, 'Cl': 17, 'Ar': 18, 'K': 19, 'Ca': 20}

05.n-gram
与えられたシーケンス（文字列やリストなど）からn-gramを作る関数を作成せよ．この関数を用い，"I am an NLPer"という文から単語bi-gram，文字bi-gramを得よ．

# 単語gram
def ngram_w(input, n):
	list = input.split() # 単語単位で分割
	result = []
	for x in range(len(list)-n+1):
		result.append(list[x:x+n])
	return(result)

>>> ngram('I am an NLPer', 2)
[['I', 'am'], ['am', 'an'], ['an', 'NLPer']]

# 文字gram
def ngram_c(input, n): 
	list = input.replace(‘ ’, ‘’) # 文字単位で分割
	result = []
	for x in range(len(list)-n+1):
		result.append(list[x:x+n])
	return(result)

>>> ngram('I am an NLPer', 2)
['Ia', 'am', 'ma', 'an', 'nN', 'NL', 'LP', 'Pe', 'er']


06.集合
"paraparaparadise"と"paragraph"に含まれる文字bi-gramの集合を，それぞれ, XとYとして求め，XとYの和集合，積集合，差集合を求めよ．さらに，'se'というbi-gramがXおよびYに含まれるかどうかを調べよ．

#集合XYの定義 問題5で定義した関数を使用
X = set(ngram_c(paraparaparadise), 2)
Y = set(ngram_c(paragraph), 2))

#和集合
unionXY = X | Y

#積集合
intersectionXY = X & Y 

#差集合
DiffXY = X - Y

#se
“se” in X
“se” in Y

07.テンプレートによる文生成
引数x, y, zを受け取り「x時のyはz」という文字列を返す関数を実装せよ．さらに，x=12, y="気温", z=22.4として，実行結果を確認せよ．

>>> def template(x,y,z):
...     return(print("{}時の{}は{}".format(x,y,z)))
... 
>>> template(12, '気温', 22.4)
12時の気温は22.4

08.暗号文
与えられた文字列の各文字を，以下の仕様で変換する関数cipherを実装せよ．
・英小文字ならば(219 - 文字コード)の文字に置換 ・その他の文字はそのまま出力
この関数を用い，英語のメッセージを暗号化・復号化せよ．

def cipher(input):
	list = [] 
	for c in input:
		if c.islower():
			list.append(chr(219 - ord(c)))
		else:
			list.append(c)
	return(‘’.join(list))	#文字列の置換方法として、一度リストにしてjoin以外の方法はないのでしょうか

>>> cipher("fuck you")
'ufxp blf'
>>> cipher('ufxp blf')
'fuck you'
			
09.Typoglycemia
スペースで区切られた単語列に対して，各単語の先頭と末尾の文字は残し，それ以外の文字の順序をランダムに並び替えるプログラムを作成せよ．ただし，長さが４以下の単語は並び替えないこととする．適当な英語の文（例えば"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind ."）を与え，その実行結果を確認せよ．


def func(input):
	l =  input.split() # inputの文字列をリスト化
	for n in range(len(l) ):

		if len(l[n]) > 4:
			word = l[n]
			slice = word[1:-1]
			shuffle = ''.join(random.sample(list(slice), len(slice)))
			l[n] = word[0] + shuffle + word[-1]
		else:
			pass

	return(' '.join(l))

>>> func("I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind")
['I', "c'nuodlt", 'believe', 'that', 'I', 'cloud', 'alutlacy', 'usaerdtnnd', 'what', 'I', 'was', 'raiendg', ':', 'the', 'pnaenomehl', 'poewr', 'of', 'the', 'haumn', 'mind']
